/*
 * This file is generated by jOOQ.
 */
package se.edinjakupovic.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import se.edinjakupovic.generated.Indexes;
import se.edinjakupovic.generated.Keys;
import se.edinjakupovic.generated.Social;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GroupAttributes extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>social.group_attributes</code>
     */
    public static final GroupAttributes GROUP_ATTRIBUTES = new GroupAttributes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>social.group_attributes.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>social.group_attributes.group_id</code>.
     */
    public final TableField<Record, String> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>social.group_attributes.attribute_key</code>.
     */
    public final TableField<Record, String> ATTRIBUTE_KEY = createField(DSL.name("attribute_key"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>social.group_attributes.attribute_value</code>.
     */
    public final TableField<Record, String> ATTRIBUTE_VALUE = createField(DSL.name("attribute_value"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private GroupAttributes(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private GroupAttributes(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>social.group_attributes</code> table reference
     */
    public GroupAttributes(String alias) {
        this(DSL.name(alias), GROUP_ATTRIBUTES);
    }

    /**
     * Create an aliased <code>social.group_attributes</code> table reference
     */
    public GroupAttributes(Name alias) {
        this(alias, GROUP_ATTRIBUTES);
    }

    /**
     * Create a <code>social.group_attributes</code> table reference
     */
    public GroupAttributes() {
        this(DSL.name("group_attributes"), null);
    }

    public <O extends Record> GroupAttributes(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, GROUP_ATTRIBUTES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Social.SOCIAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GROUP_ATTRIBUTES_GROUP_ID);
    }

    @Override
    public Identity<Record, Integer> getIdentity() {
        return (Identity<Record, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_GROUP_ATTRIBUTES_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.GROUP_ATTRIBUTES_IBFK_1);
    }

    private transient UserGroups _userGroups;

    /**
     * Get the implicit join path to the <code>social.user_groups</code> table.
     */
    public UserGroups userGroups() {
        if (_userGroups == null)
            _userGroups = new UserGroups(this, Keys.GROUP_ATTRIBUTES_IBFK_1);

        return _userGroups;
    }

    @Override
    public GroupAttributes as(String alias) {
        return new GroupAttributes(DSL.name(alias), this);
    }

    @Override
    public GroupAttributes as(Name alias) {
        return new GroupAttributes(alias, this);
    }

    @Override
    public GroupAttributes as(Table<?> alias) {
        return new GroupAttributes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupAttributes rename(String name) {
        return new GroupAttributes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupAttributes rename(Name name) {
        return new GroupAttributes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupAttributes rename(Table<?> name) {
        return new GroupAttributes(name.getQualifiedName(), null);
    }
}
